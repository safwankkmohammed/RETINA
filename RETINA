import argparse
import cv2
import os
import time  
import pyttsx3

from pycoral.adapters.common import input_size
from pycoral.adapters.detect import get_objects
from pycoral.utils.dataset import read_label_file
from pycoral.utils.edgetpu import make_interpreter
from pycoral.utils.edgetpu import run_inference

engine = pyttsx3.init()
last_spoken = {} 

def main():
    interpreter = make_interpreter('mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite')
    interpreter.allocate_tensors()
    labels = read_label_file('coco_labels.txt')
    inference_size = input_size(interpreter)

    cap = cv2.VideoCapture(0)

    # Initialize variables for FPS calculation
    frame_count = 0
    start_time = time.time()

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Increment the frame count
        frame_count += 1

        # Process frame
        cv2_im = frame
        cv2_im_rgb = cv2.cvtColor(cv2_im, cv2.COLOR_BGR2RGB)
        cv2_im_rgb = cv2.resize(cv2_im_rgb, inference_size)
        run_inference(interpreter, cv2_im_rgb.tobytes())
        objs = get_objects(interpreter, 0.1)[:3]
        cv2_im = append_objs_to_img(cv2_im, inference_size, objs, labels)

        # Calculate FPS
        elapsed_time = time.time() - start_time
        if elapsed_time > 0:
            fps = frame_count / elapsed_time
        else:
            fps = 0

        # Display FPS on the image
        fps_text = f"FPS: {fps:.2f}"
        cv2.putText(cv2_im, fps_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0), 2)

        # Show the frame
        cv2.imshow('frame', cv2_im)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

def append_objs_to_img(cv2_im, inference_size, objs, labels):
    global last_spoken  # Use the global dictionary
    height, width, channels = cv2_im.shape
    scale_x, scale_y = width / inference_size[0], height / inference_size[1]
    center_threshold = width // 5  # Define the center region threshold
    
    for obj in objs:
        bbox = obj.bbox.scale(scale_x, scale_y)
        x0, y0 = int(bbox.xmin), int(bbox.ymin)
        x1, y1 = int(bbox.xmax), int(bbox.ymax)

        percent = int(100 * obj.score)
        if percent > 50:
            objname = labels.get(obj.id, obj.id)
            print(objname)  # Print detected object

            obj_center_x = (x0 + x1) // 2
            if abs(obj_center_x - width // 2) < center_threshold:
                position = "front"
            elif obj_center_x < width // 2:
                position = "left"
            else:
                position = "right"
            
            announcement = f"Detected {objname}{position} side"

            # Check if 10 seconds have passed since last spoken
            current_time = time.time()
            if objname not in last_spoken or (current_time - last_spoken[objname] > 10):
                last_spoken[objname] = current_time  # Update last spoken time
                engine.say(announcement)
                engine.runAndWait()

            label = f"{percent}% {objname} ({position})"
            cv2_im = cv2.rectangle(cv2_im, (x0, y0), (x1, y1), (0, 255, 0), 2)
            cv2_im = cv2.putText(cv2_im, label, (x0, y0 + 30),
                                 cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 0, 0), 2)
    
    return cv2_im

if __name__ == '__main__':
    main()
